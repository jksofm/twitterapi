openapi: 3.0.3
info:
  title: Swagger Twitter - OpenAPI 3.0
  description: |-
    This is a sample Twitter Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io)

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3001/api
tags:
  - name: users
    description: Các API liên quan đến Users
    externalDocs:
      description: Find out more
      url: http://swagger.io

paths:
  /users/login:
    post:
      tags:
        - users
      summary: Đăng nhập
      description: Đăng nhập vào hệ thống
      operationId: login

      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  result:
                    type: object
                    $ref: '#/components/schemas/SuccessAuthentication'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email or Password is not correct

        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        example: '{"type": "field","value": "lequochuypy1998","msg": "Email is invalid","path": "email","location": "body"}'

    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /users/get-my-profile:
    get:
      tags:
        - users
      summary: Lấy thông tin người dùng
      description: Lấy thông tin người dùng
      operationId: Get My Profile
      security:
        - bearAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile successfully
                  result:
                    type: object
                    $ref: '#/components/schemas/UserInfo'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You need to login to get access

components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: lequochuypy1998@gmail.com
        password:
          type: string
          example: Elegant1998!
    SuccessAuthentication:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGJkZDc0ODM2Y2E4YTg1NTA1OTNkM2IiLCJ0b2tlbl90eXBlIjoxLCJpYXQiOjE2OTQwNzY2MTYsImV4cCI6MTcwMjcxNjYxNn0.X1EXw3d29flIbeXM7LvmlEjq1SqsSmZZ02IAzXsvDjY
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGJkZDc0ODM2Y2E4YTg1NTA1OTNkM2IiLCJ0b2tlbl90eXBlIjowLCJpYXQiOjE2OTQwNzY2MTYsImV4cCI6MTY5NDE2MzAxNn0.Sjo-LZQ_ctkJghLntK9llZketR1MUkMg6E7LZAn2qo0
    UserInfo:
      type: object
      properties:
        _id:
          type: string
          example: 64bdd74836ca8a8550593d3b
        name:
          type: string
          example: Le Quoc Huy
        email:
          type: string
          example: lequochuypy1998@gmail.com
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        bio:
          type: string
          description: Giới thiệu bản thân
          example: Tôi là Huy.Tôi là một lập trình viên.
        location:
          type: string
          example: '15 Hoàng Quốc Việt, Quận 7'
          description: Địa chỉ
        webstie:
          type: string
          example: 'https://facebook.com/jksofm'
          description: Website cá nhân
        username:
          type: string
          example: '@huy1998'
        avatar:
          type: string
          example: https://i.pinimg.com/236x/ba/4e/fb/ba4efb6ee1537e8970d3d17698b3c18d.jpg
          description: Ảnh đại diện
        cover_photo:
          type: string
          example: https://i.pinimg.com/236x/ba/4e/fb/ba4efb6ee1537e8970d3d17698b3c18d.jpg
          description: Ảnh nền
        date_of_birth:
          type: string
          format: ISO8601
          example: '2023-07-24T01:43:36.085Z'
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
